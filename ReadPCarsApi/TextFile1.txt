using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace TGCQualifying.Services
{

    enum eHeaderVersion
    {
        SHARED_MEMORY_VERSION = 4
    }

    public enum eStringLenMax
    {
        STRING_LENGTH_MAX = 64
    }


    // Maximum number of general participant information allowed to be stored in memory-mapped file
    public enum eMaxPart
    {
        STORED_PARTICIPANTS_MAX = 16
    };

    public enum eTyres
    {
        TYRE_FRONT_LEFT = 0,
        TYRE_FRONT_RIGHT,
        TYRE_REAR_LEFT,
        TYRE_REAR_RIGHT,
        //--------------
        TYRE_MAX
    }

    public enum eVector
    {
        VEC_X = 0,
        VEC_Y,
        VEC_Z,
        //-------------
        VEC_MAX
    }

    public enum eGameState
    {
        GAME_EXITED = 0,
        GAME_FRONT_END,
        GAME_INGAME_PLAYING,
        GAME_INGAME_PAUSED,
        //-------------
        GAME_MAX
    }

    public enum eSessionState
    {
        SESSION_INVALID = 0,
        SESSION_PRACTICE,
        SESSION_TEST,
        SESSION_QUALIFY,
        SESSION_FORMATION_LAP,
        SESSION_RACE,
        SESSION_TIME_ATTACK,
        //-------------
        SESSION_MAX
    }

    // (Type#3) RaceState (to be used with 'mRaceState')
    public enum mRaceState
    {
        RACESTATE_INVALID,
        RACESTATE_NOT_STARTED,
        RACESTATE_RACING,
        RACESTATE_FINISHED,
        RACESTATE_DISQUALIFIED,
        RACESTATE_RETIRED,
        RACESTATE_DNF,
        //-------------
        RACESTATE_MAX
    };

    // (Type#4) Current Sector (to be used with 'mCurrentSector')
    public enum mCurrentSector
    {
        SECTOR_INVALID = 0,
        SECTOR_START,
        SECTOR_SECTOR1,
        SECTOR_SECTOR2,
        SECTOR_FINISH,
        SECTOR_STOP,
        //-------------
        SECTOR_MAX
    };


    // (Type#5) Flag Colours (to be used with 'mHighestFlagColour')
    public enum mHighestFlagColour
    {
        FLAG_COLOUR_NONE = 0,       // Not used for actual flags, only for some query functions
        FLAG_COLOUR_GREEN,          // End of danger zone, or race started
        FLAG_COLOUR_BLUE,           // Faster car wants to overtake the participant
        FLAG_COLOUR_WHITE,          // Approaching a slow car
        FLAG_COLOUR_YELLOW,         // Danger on the racing surface itself
        FLAG_COLOUR_DOUBLE_YELLOW,  // Danger that wholly or partly blocks the racing surface
        FLAG_COLOUR_BLACK,          // Participant disqualified
        FLAG_COLOUR_CHEQUERED,      // Chequered flag
        //-------------
        FLAG_COLOUR_MAX
    };



    // (Type#6) Flag Reason (to be used with 'mHighestFlagReason')
    public enum mHighestFlagReason
    {
        FLAG_REASON_NONE = 0,
        FLAG_REASON_SOLO_CRASH,
        FLAG_REASON_VEHICLE_CRASH,
        FLAG_REASON_VEHICLE_OBSTRUCTION,
        //-------------
        FLAG_REASON_MAX
    };


    // (Type#7) Pit Mode (to be used with 'mPitMode')
    public enum mPitMode
    {
        PIT_MODE_NONE = 0,
        PIT_MODE_DRIVING_INTO_PITS,
        PIT_MODE_IN_PIT,
        PIT_MODE_DRIVING_OUT_OF_PITS,
        PIT_MODE_IN_GARAGE,
        //-------------
        PIT_MODE_MAX
    };


    // (Type#8) Pit Stop Schedule (to be used with 'mPitSchedule')
    public enum mPitSchedule
    {
        PIT_SCHEDULE_NONE = 0,        // Nothing scheduled
        PIT_SCHEDULE_STANDARD,        // Used for standard pit sequence
        PIT_SCHEDULE_DRIVE_THROUGH,   // Used for drive-through penalty
        PIT_SCHEDULE_STOP_GO,         // Used for stop-go penalty
        //-------------
        PIT_SCHEDULE_MAX
    };

    public enum eTerrain
    {
        TERRAIN_ROAD = 0,
        TERRAIN_LOW_GRIP_ROAD,
        TERRAIN_BUMPY_ROAD1,
        TERRAIN_BUMPY_ROAD2,
        TERRAIN_BUMPY_ROAD3,
        TERRAIN_MARBLES,
        TERRAIN_GRASSY_BERMS,
        TERRAIN_GRASS,
        TERRAIN_GRAVEL,
        TERRAIN_BUMPY_GRAVEL,
        TERRAIN_RUMBLE_STRIPS,
        TERRAIN_DRAINS,
        TERRAIN_TYREWALLS,
        TERRAIN_CEMENTWALLS,
        TERRAIN_GUARDRAILS,
        TERRAIN_SAND,
        TERRAIN_BUMPY_SAND,
        TERRAIN_DIRT,
        TERRAIN_BUMPY_DIRT,
        TERRAIN_DIRT_ROAD,
        TERRAIN_BUMPY_DIRT_ROAD,
        TERRAIN_PAVEMENT,
        TERRAIN_DIRT_BANK,
        TERRAIN_WOOD,
        TERRAIN_DRY_VERGE,
        TERRAIN_EXIT_RUMBLE_STRIPS,
        TERRAIN_GRASSCRETE,
        TERRAIN_LONG_GRASS,
        TERRAIN_SLOPE_GRASS,
        TERRAIN_COBBLES,
        TERRAIN_SAND_ROAD,
        TERRAIN_BAKED_CLAY,
        TERRAIN_ASTROTURF,
        TERRAIN_SNOWHALF,
        TERRAIN_SNOWFULL,
        //-------------
        TERRAIN_MAX
    }

    public enum eCrashDamageState
    {
        CRASH_DAMAGE_NONE = 0,
        CRASH_DAMAGE_OFFTRACK,
        CRASH_DAMAGE_LARGE_PROP,
        CRASH_DAMAGE_SPINNING,
        CRASH_DAMAGE_ROLLING,
        //-------------
        CRASH_MAX
    }

    public enum eCurrentSector
    {
        SECTOR_INVALID = 0,
        SECTOR_START,
        SECTOR_SECTOR1,
        SECTOR_SECTOR2,
        SECTOR_FINISH,
        SECTOR_STOP,
        //-------------
        SECTOR_MAX
    }

    public enum eCarFlags
    {
        CAR_HEADLIGHT = (1 << 0),
        CAR_ENGINE_ACTIVE = (1 << 1),
        CAR_ENGINE_WARNING = (1 << 2),
        CAR_SPEED_LIMITER = (1 << 3),
        CAR_ABS = (1 << 4),
        CAR_HANDBRAKE = (1 << 5),
    }

    public enum eTyreFlags
    {
        TYRE_ATTACHED = (1 << 0),
        TYRE_INFLATED = (1 << 1),
        TYRE_IS_ON_GROUND = (1 << 2),
    }


    //[Serializable]
    //[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct pCarsAPIV2
    {
        // Version Number
        public uint mVersion;                           // [ RANGE = 0->... ]
        public uint mBuildVersionNumber;                // [ RANGE = 0->... ]   [ UNSET = 0 ]

        // Session type
        public uint mGameState;                         // [ enum (Type#1) Game state ]
        public uint mSessionState;                      // [ enum (Type#2) Session state ]
        public int mRaceState;                         // [ enum (Type#3) Race State ]

        // Participant Info
        public int mViewedParticipantIndex;                      // [ RANGE = 0->STORED_PARTICIPANTS_MAX ]   [ UNSET = -1 ]
        public int mNumParticipants;                             // [ RANGE = 0->STORED_PARTICIPANTS_MAX ]   [ UNSET = -1 ]

        // Unfiltered Input
        public float mUnfilteredThrottle;                       // [ RANGE = 0.0f->1.0f ]
        public float mUnfilteredBrake;                          // [ RANGE = 0.0f->1.0f ]
        public float mUnfilteredSteering;                       // [ RANGE = -1.0f->1.0f ]
        public float mUnfilteredClutch;                         // [ RANGE = 0.0f->1.0f ]

  
  // Participant names (storing first 16 indices)
               [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
  char mParticipant01Name ;       // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
  char mParticipant02Name ;       // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant03Name;      // / [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant04Name;    //      // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant05Name;      //       // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant06Name;    //     // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant07Name;   //   // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant08Name;     // / [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant09Name;     //     // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant10Name;    //     // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant11Name;     // // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant12Name;    //   // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant13Name;    // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant14Name;    // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant15Name;  //      // [ string ]
                       [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eMaxPart.STORED_PARTICIPANTS_MAX)]
                       char mParticipant16Name;     //   // [ string ]

   // Vehicle & Track information
  char mCarName[STRING_LENGTH_MAX];                 // [ string ]
  char mCarClassName[STRING_LENGTH_MAX];            // [ string ]
  char mTrackLocation[STRING_LENGTH_MAX];           // [ string ]
  char mTrackVariation[STRING_LENGTH_MAX];          // [ string ]
  float mTrackLength;                               // [ UNITS = Metres ]   [ RANGE = 0.0f->... ]    [ UNSET = 0.0f ]
  float mCurrentLapDistance;                        // [ UNITS = Metres ]   [ RANGE = 0.0f->... ]    [ UNSET = 0.0f ]

        // Timings
        public bool mLapInvalidated;                             // [ UNITS = boolean ]   [ RANGE = false->true ]   [ UNSET = false ]
        public float mBestLapTime;                              // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mLastLapTime;                              // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mCurrentTime;                              // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mSplitTimeAhead;                            // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mSplitTimeBehind;                           // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mSplitTime;                                // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mEventTimeRemaining;                       // [ UNITS = milli-seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mFastestLapTime;                            // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mPersonalFastestLapTime;                    // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mWorldFastestLapTime;                       // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mCurrentSector1Time;                       // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mCurrentSector2Time;                       // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mCurrentSector3Time;                        // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mFastestSector1Time;                        // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mFastestSector2Time;                        // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mFastestSector3Time;                        // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mPersonalFastestSector1Time;                // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mPersonalFastestSector2Time;                // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mPersonalFastestSector3Time;                // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mWorldFastestSector1Time;                   // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mWorldFastestSector2Time;                   // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public float mWorldFastestSector3Time;                   // [ UNITS = seconds ]   [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]

        // Race Info
        public uint mLapsInEvent;                       // [ RANGE = 0->... ]   [ UNSET = 0 ]
        public uint mLapsCompleted;                     // [ RANGE = 0->... ]   [ UNSET = 0 ]
        public uint mCurrentLap;                        // [ RANGE = 0->... ]   [ UNSET = 0 ]
        public uint mCurrentPosition;                   // [ RANGE = 1->... ]   [ UNSET = 0 ]
        public uint mNumberOfCars;                      // [ RANGE = 1->... ]   [ UNSET = 0 ]
        public uint mCurrentSector;                     // [ enum (Type#5) Current Sector ]

        // Flags
        public int mHighestFlagColour;                 // [ enum (Type#5) Flag Colour ]
        public int mHighestFlagReason;                 // [ enum (Type#6) Flag Reason ]

        // Pit Info
        public int mPitMode;                           // [ enum (Type#7) Pit Mode ]
        public int mPitSchedule;                       // [ enum (Type#8) Pit Stop Schedule ]
        
        // Car State
        public uint mCarFlags;                          // [ enum (Type#6) Car Flags ]
        public float mOilTempCelsius;                           // [ UNITS = Celsius ]   [ UNSET = 0.0f ]
        public float mOilPressureKPa;                           // [ UNITS = Kilopascal ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mWaterTempCelsius;                         // [ UNITS = Celsius ]   [ UNSET = 0.0f ]
        public float mWaterPressureKPa;                         // [ UNITS = Kilopascal ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mFuelPressureKPa;                          // [ UNITS = Kilopascal ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mFuelLevel;                                // [ RANGE = 0.0f->1.0f ]
        public float mFuelCapacity;                             // [ UNITS = Liters ]   [ RANGE = 0.0f->1.0f ]   [ UNSET = 0.0f ]
        public float mSpeed;                                    // [ UNITS = Metres per-second ]   [ RANGE = 0.0f->... ]
        public float mRpm;                                      // [ UNITS = Revolutions per minute ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mMaxRPM;                                   // [ UNITS = Revolutions per minute ]   [ RANGE = 0.0f->... ]   [ UNSET = 0.0f ]
        public float mBrake;                                    // [ RANGE = 0.0f->1.0f ]
        public float mThrottle;                                 // [ RANGE = 0.0f->1.0f ]
        public float mClutch;                                   // [ RANGE = 0.0f->1.0f ]
        public float mSteering;                                 // [ RANGE = -1.0f->1.0f ]
        public int mGear;                                       // [ RANGE = -1 (Reverse)  0 (Neutral)  1 (Gear 1)  2 (Gear 2)  etc... ]   [ UNSET = 0 (Neutral) ]
        public int mNumGears;                                   // [ RANGE = 0->... ]   [ UNSET = -1 ]
        public float mOdometerKM;                               // [ RANGE = 0.0f->... ]   [ UNSET = -1.0f ]
        public bool mAntiLockActive;                            // [ UNITS = boolean ]   [ RANGE = false->true ]   [ UNSET = false ]
        public int mLastOpponentCollisionIndex;                 // [ RANGE = 0->STORED_PARTICIPANTS_MAX ]   [ UNSET = -1 ]
        public float mLastOpponentCollisionMagnitude;           // [ RANGE = 0.0f->... ]
        public bool mBoostActive;                               // [ UNITS = boolean ]   [ RANGE = false->true ]   [ UNSET = false ]
        public float mBoostAmount;                              // [ RANGE = 0.0f->100.0f ] 


        // Car Damage
        public uint mCrashState;                        // [ enum (Type#4) Crash Damage State ]
        public float mAeroDamage;                               // [ RANGE = 0.0f->1.0f ]
        public float mEngineDamage;                             // [ RANGE = 0.0f->1.0f ]


        // Weather
        public float mAmbientTemperature;                       // [ UNITS = Celsius ]   [ UNSET = 25.0f ]
        public float mTrackTemperature;                         // [ UNITS = Celsius ]   [ UNSET = 30.0f ]
        public float mRainDensity;                              // [ UNITS = How much rain will fall ]   [ RANGE = 0.0f->1.0f ]
        public float mWindSpeed;                                // [ RANGE = 0.0f->100.0f ]   [ UNSET = 2.0f ]
        public float mWindDirectionX;                           // [ UNITS = Normalised Vector X ]
        public float mWindDirectionY;                           // [ UNITS = Normalised Vector Y ]
        public float mCloudBrightness;                          // [ RANGE = 0.0f->... ]
      
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mWorldPosition;                   // [ UNITS = World Space  X  Y  Z ]

        // Motion & Device Related
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mOrientation;                     // [ UNITS = Euler Angles ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mLocalVelocity;                   // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mWorldVelocity;                   // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mAngularVelocity;                 // [ UNITS = Radians per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mLocalAcceleration;               // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mWorldAcceleration;               // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eVector.VEC_MAX)]
        public float[] mExtentsCentre;                   // [ UNITS = Local Space  X  Y  Z ]

        // Wheels / Tyres
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public uint[] mTyreFlags;               // [ enum (Type#7) Tyre Flags ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public uint[] mTerrain;                 // [ enum (Type#3) Terrain Materials ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreY;                          // [ UNITS = Local Space  Y ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreRPS;                        // [ UNITS = Revolutions per second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreSlipSpeed;                  // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreSpeed;                      // [ UNITS = Metres per-second ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreTemp;                       // [ UNITS = Celsius ]   [ UNSET = 0.0f ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreGrip;                       // [ RANGE = 0.0f->1.0f ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreHeightAboveGround;          // [ UNITS = Local Space  Y ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreLateralStiffness;           // [ UNITS = Lateral stiffness coefficient used in tyre deformation ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mTyreWear;                       // [ RANGE = 0.0f->1.0f ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mBrakeDamage;                    // [ RANGE = 0.0f->1.0f ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mSuspensionDamage;               // [ RANGE = 0.0f->1.0f ]
        [MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = (int)eTyres.TYRE_MAX)]
        public float[] mBrakeTempCelsius;               // [ UNITS = Celsius ]


        
        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eStringLenMax.STRING_LENGTH_MAX)]
        public string mPlayerName;
        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eStringLenMax.STRING_LENGTH_MAX)]
        public string mCarName;                // [ string ]
        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eStringLenMax.STRING_LENGTH_MAX)]
        public string mCarClassName ; // [ string ]
        [MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = (int)eStringLenMax.STRING_LENGTH_MAX)]
        public string mTrackName;              // [ string ]




    }







}